{"version":3,"sources":["unsoldPriceRange.js"],"names":["UnsoldCarsWithinPriceRange","req","res","validateRange","validation","body","error","status","json","details","message","Price","min_price","max_price","unsoldCars","cars","filter","car","PriceRange","p","price","length","data"],"mappings":";;;;;;;AACA;;AACA;;;;AAFA;AAIA,IAAMA,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,8BAC7BC,kBAAcC,UAAd,CAAyBH,GAAG,CAACI,IAA7B,CAD6B;AAAA,MACvCC,KADuC,yBACvCA,KADuC;;AAE/C,MAAIA,KAAJ,EAAW;AACTJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBD,MAAAA,KAAK,EAAEA,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBC;AAFL,KAArB;AAIA;AACD;;AACD,MAAMC,KAAK,GAAG;AACZC,IAAAA,SAAS,EAAEX,GAAG,CAACI,IAAJ,CAASO,SADR;AAEZC,IAAAA,SAAS,EAAEZ,GAAG,CAACI,IAAJ,CAASQ;AAFR,GAAd;;AAIA,MAAMC,UAAU,GAAGC,qBAAKC,MAAL,CAAY,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACV,MAAJ,KAAe,WAAnB;AAAA,GAAf,CAAnB;;AACA,MAAMW,UAAU,GAAGJ,UAAU,CAACE,MAAX,CAAkB,UAAAG,CAAC;AAAA,WAAIA,CAAC,CAACC,KAAF,IAAWT,KAAK,CAACC,SAAjB,IAA8BO,CAAC,CAACC,KAAF,IAAWT,KAAK,CAACE,SAAnD;AAAA,GAAnB,CAAnB;;AACA,MAAI,CAACK,UAAU,CAACG,MAAhB,EAAwB;AACtBnB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBD,MAAAA,KAAK,EAAE;AAFY,KAArB;AAIA;AACD;;AACDJ,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,IAAAA,MAAM,EAAE,GADW;AAEnBe,IAAAA,IAAI,EAAEJ;AAFa,GAArB;AAID,CA1BD;;eA2BelB,0B","sourceRoot":"G:\\Auto-Mart-Website\\server\\controllers","sourcesContent":["/* eslint-disable max-len */\r\nimport cars from '../models/postCars';\r\nimport validateRange from '../helpers/range';\r\n\r\nconst UnsoldCarsWithinPriceRange = (req, res) => {\r\n  const { error } = validateRange.validation(req.body);\r\n  if (error) {\r\n    res.status(400).json({\r\n      status: 400,\r\n      error: error.details[0].message,\r\n    });\r\n    return;\r\n  }\r\n  const Price = {\r\n    min_price: req.body.min_price,\r\n    max_price: req.body.max_price,\r\n  };\r\n  const unsoldCars = cars.filter(car => car.status === 'available');\r\n  const PriceRange = unsoldCars.filter(p => p.price >= Price.min_price && p.price <= Price.max_price);\r\n  if (!PriceRange.length) {\r\n    res.status(404).json({\r\n      status: 404,\r\n      error: 'there are no cars within that price range not found',\r\n    });\r\n    return;\r\n  }\r\n  res.status(200).json({\r\n    status: 200,\r\n    data: PriceRange,\r\n  });\r\n};\r\nexport default UnsoldCarsWithinPriceRange;\r\n"]}