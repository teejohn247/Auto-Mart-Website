{"version":3,"sources":["signin.js"],"names":["signin","req","res","userSchema","email","body","password","validateUserSignin","validation","error","status","json","details","message","user","users","find","e","p","token","jwt","sign","expiresIn","firstName","data","id","lastName"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,MAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAEH,GAAG,CAACI,IAAJ,CAASD,KADC;AAEjBE,IAAAA,QAAQ,EAAEL,GAAG,CAACI,IAAJ,CAASC;AAFF,GAAnB;;AAD2B,8BAMTC,mBAAmBC,UAAnB,CAA8BP,GAAG,CAACI,IAAlC,CANS;AAAA,MAMnBI,KANmB,yBAMnBA,KANmB;;AAO3B,MAAIA,KAAJ,EAAW;AACT,WAAOP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeD,MAAAA,KAAK,EAAEA,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBC;AAAvC,KAArB,CAAP;AACD;;AAED,MAAMC,IAAI,GAAGC,kBAAMC,IAAN,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACb,KAAF,KAAYD,UAAU,CAACC,KAA3B;AAAA,GAAZ,CAAb;;AACA,MAAI,CAACU,IAAL,EAAW;AACT,WAAOZ,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,GADkB;AAE1BD,MAAAA,KAAK,EAAE;AAFmB,KAArB,CAAP;AAID;;AAED,MAAMH,QAAQ,GAAGS,kBAAMC,IAAN,CAAW,UAAAE,CAAC;AAAA,WAAIA,CAAC,CAACZ,QAAF,KAAeL,GAAG,CAACI,IAAJ,CAASC,QAA5B;AAAA,GAAZ,CAAjB;;AACA,MAAI,CAACA,QAAL,EAAe;AACb,WAAOJ,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,MAAAA,MAAM,EAAE,GADkB;AAE1BD,MAAAA,KAAK,EAAE;AAFmB,KAArB,CAAP;AAID;;AAED,MAAMU,KAAK,GAAGC,yBAAIC,IAAJ,CAASP,IAAT,EAAe,YAAf,EAA6B;AAAEQ,IAAAA,SAAS,EAAE;AAAb,GAA7B,CAAd;;AACA,MAAMC,SAAS,GAAGT,IAAI,CAACS,SAAvB;AAEA,SAAOrB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,IAAAA,MAAM,EAAE,GADkB;AAE1BG,IAAAA,OAAO,0BAAmBU,SAAnB,MAFmB;AAG1BC,IAAAA,IAAI,EAAE;AACJL,MAAAA,KAAK,EAALA,KADI;AAEJM,MAAAA,EAAE,EAAEX,IAAI,CAACW,EAFL;AAGJF,MAAAA,SAAS,EAAET,IAAI,CAACS,SAHZ;AAIJG,MAAAA,QAAQ,EAAEZ,IAAI,CAACY,QAJX;AAKJtB,MAAAA,KAAK,EAAEU,IAAI,CAACV;AALR;AAHoB,GAArB,CAAP;AAWD,CAzCD;;eA2CeJ,M","sourceRoot":"C:\\server\\controllers","sourcesContent":["/* eslint-disable prefer-destructuring */\r\nimport jwt from 'jsonwebtoken';\r\nimport users from '../models/users';\r\nimport validateUserSignin from '../helpers/signin';\r\n\r\nconst signin = (req, res) => {\r\n  const userSchema = {\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n  };\r\n\r\n  const { error } = validateUserSignin.validation(req.body);\r\n  if (error) {\r\n    return res.status(400).json({ status: 400, error: error.details[0].message });\r\n  }\r\n\r\n  const user = users.find(e => e.email === userSchema.email);\r\n  if (!user) {\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: 'User not found',\r\n    });\r\n  }\r\n\r\n  const password = users.find(p => p.password === req.body.password);\r\n  if (!password) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      error: 'Incorrect password',\r\n    });\r\n  }\r\n\r\n  const token = jwt.sign(user, 'SECRET_KEY', { expiresIn: '24hrs' });\r\n  const firstName = user.firstName;\r\n\r\n  return res.status(200).json({\r\n    status: 200,\r\n    message: `Welcome back, ${firstName}!`,\r\n    data: {\r\n      token,\r\n      id: user.id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n    },\r\n  });\r\n};\r\n\r\nexport default signin;\r\n"]}